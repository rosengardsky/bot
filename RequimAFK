# -*- coding: utf-8 -*-
# meta developer: RequiMods —Ä–∞–∑—Ä—É—à–∞—è –º–µ—á—Ç—ã
# meta banner: https://x0.at/Zixd.gif
# scope: hikka_only

import datetime
import logging
import time
from telethon import types, functions  # type: ignore
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class RequimAFK(loader.Module):
    """–í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–µ–∂–∏–º–µ AFK"""

    strings = {
        "name": "RequimAFK",
        "gone": "<b><emoji document_id=5287692511945437157>‚úÖ</emoji> –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ AFK —Ä–µ–∂–∏–º!</b>",
        "back": "<b><emoji document_id=5287692511945437157>‚úÖ</emoji> –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ AFK —Ä–µ–∂–∏–º–∞!</b>",
        "afk": "<b><emoji document_id=5287613458777387650>üò¥</emoji> –°–µ–π—á–∞—Å —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ AFK\n<emoji document_id=5287737368583876982>üåÄ</emoji> –ë—ã–ª –≤ —Å–µ—Ç–∏ <code>{}</code> –Ω–∞–∑–∞–¥</b>",
        "afk_reason": "<b><emoji document_id=5287613458777387650>üò¥</emoji> –°–µ–π—á–∞—Å —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ AFK\n<emoji document_id=5287737368583876982>üåÄ</emoji> –ë—ã–ª –≤ —Å–µ—Ç–∏ <code>{}</code> –Ω–∞–∑–∞–¥\n<emoji document_id=5445161912985724546>‚úèÔ∏è</emoji> –ü—Ä–∏—á–∏–Ω–∞: <i>{}</i></b>",
        "status_added": "<b><emoji document_id=5285372392086976148>ü¶ã</emoji> –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>",
        "status_removed": "<b><emoji document_id=5879896690210639947>üóë</emoji> –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!</b>",
        "no_user": "<b><emoji document_id=5287611315588707430>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.</b>",
        "no_previous_status": "<b><emoji document_id=5287740598399285194>üòµ‚Äçüí´</emoji> –ü—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
    }

    async def client_ready(self, client, db):
        self.client = client
        self._db = db
        self._me = await client.get_me()

    @loader.command(ru_doc="[reason] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º AFK")
    async def afk(self, message):
        """[reason] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º AFK"""
        if utils.get_args_raw(message):
            self._db.set(__name__, "afk", utils.get_args_raw(message))
        else:
            self._db.set(__name__, "afk", True)
        self._db.set(__name__, "gone", time.time())
        self._db.set(__name__, "ratelimit", [])
        await utils.answer(message, self.strings["gone"])

    @loader.command(ru_doc="–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ AFK")
    async def unafk(self, message):
        """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ AFK"""
        self._db.set(__name__, "afk", False)
        self._db.set(__name__, "gone", None)
        self._db.set(__name__, "ratelimit", [])
        await utils.answer(message, self.strings["back"])

    @loader.command(ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å AFK")
    async def setstatus(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å AFK"""
        user = await utils.get_user(message)
        if user:
            current_last_name = user.last_name if user.last_name else ""
            if " || AFK" in current_last_name:
                await utils.answer(message, self.strings["status_added"])
                return

            new_last_name = current_last_name + " || AFK"
            try:
                await self.client(functions.account.UpdateProfileRequest(last_name=new_last_name))
                await utils.answer(message, self.strings["status_added"])
            except Exception as e:
                await utils.answer(message, f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}</b>")
        else:
            await utils.answer(message, self.strings["no_user"])

    @loader.command(ru_doc="–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å AFK")
    async def removestatus(self, message):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å AFK"""
        user = await utils.get_user(message)
        if user:
            current_last_name = user.last_name if user.last_name else ""
            if " || AFK" in current_last_name:
                try:
                    previous_first_name = user.first_name if user.first_name else ""
                    previous_last_name = current_last_name.replace(" || AFK", "")
                    await self.client(functions.account.UpdateProfileRequest(first_name=previous_first_name, last_name=previous_last_name))
                    await utils.answer(message, self.strings["status_removed"])
                except Exception as e:
                    await utils.answer(message, f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}</b>")
            else:
                await utils.answer(message, self.strings["no_previous_status"])
        else:
            await utils.answer(message, self.strings["no_user"])

    async def watcher(self, message):
        if not isinstance(message, types.Message):
            return
        if message.mentioned or getattr(message.to_id, "user_id", None) == self._me.id:
            afk_state = self.get_afk()
            if not afk_state:
                return
            logger.debug("tagged!")
            ratelimit = self._db.get(__name__, "ratelimit", [])
            if utils.get_chat_id(message) in ratelimit:
                return
            else:
                self._db.setdefault(__name__, {}).setdefault("ratelimit", []).append(
                    utils.get_chat_id(message)
                )
                self._db.save()
            user = await utils.get_user(message)
            if user.is_self or user.bot or user.verified:
                logger.debug("User is self, bot or verified.")
                return
            if self.get_afk() is False:
                return
            now = datetime.datetime.now().replace(microsecond=0)
            gone = datetime.datetime.fromtimestamp(
                self._db.get(__name__, "gone")
            ).replace(microsecond=0)
            diff = now - gone
            if afk_state is True:
                ret = self.strings["afk"].format(diff)
            elif afk_state is not False:
                ret = self.strings["afk_reason"].format(diff, afk_state)
            await utils.answer(message, ret, reply_to=message)

    def get_afk(self):
        return self._db.get(__name__, "afk", False)
