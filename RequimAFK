# -*- coding: utf-8 -*-
# meta developer: RequiMods разрушая мечты
# meta banner: https://x0.at/Zixd.gif
# scope: hikka_only

import asyncio
from datetime import datetime
from .. import loader, utils

class ModuleConfig:
    def __init__(self):
        self.afk_text = "Я сейчас не у компьютера (AFK)."
        self.afk_reason = ""
        self.afk_status = "AFK|| "
        self.afk_entry_message = "Режим AFK включён. Время: {time}"
        self.afk_exit_message = "Режим AFK выключен."

    def get_afk_text(self):
        return self.afk_text

    def set_afk_text(self, text):
        self.afk_text = text

@loader.tds
class RequimAFK(loader.Module):
    """Модуль для управления статусом AFK."""

    strings = {
        "name": "RequimAFK",
        "cfg_afk_text": "Текст для статуса AFK",
        "cfg_afk_reason": "Причина для статуса AFK",
        "cfg_afk_status": "Статус пользователя при AFK",
        "cfg_afk_entry_message": "Уведомление о входе в AFK",
        "cfg_afk_exit_message": "Уведомление о выходе из AFK"
    }

    def __init__(self):
        self.config = ModuleConfig()
        self.afk_mode = False
        self.start_time = None
        self.original_nick = None

    async def client_ready(self, client, db):
        self._client = client

    @loader.command(alias="afk")
    async def afk_cmd(self, message):
        """Включает режим AFK и отправляет сообщение."""
        self.afk_mode = True
        self.start_time = datetime.now()
        afk_message = f"{self.config.get_afk_text()}\nВремя AFK: {self.start_time.strftime('%H:%M:%S')}"
        await utils.answer(message, afk_message)

        # Устанавливаем новый статус
        current_me = await self._client.get_me()
        self.original_nick = current_me.first_name  # Сохраняем оригинальный ник
        new_nick = f"{self.config.afk_status}{self.original_nick}"
        await self._client.edit_profile(first_name=new_nick)

        # Уведомление об активации AFK
        entry_message = self.config.afk_entry_message.format(time=self.start_time.strftime('%H:%M:%S'))
        await self._client.send_message(message.peer_id, entry_message)

    @loader.command(alias="afkstop")
    async def afk_stop_cmd(self, message):
        """Выключает режим AFK и уведомляет об этом."""
        if not self.afk_mode:
            await utils.answer(message, "Вы не находитесь в режиме AFK.")
            return

        self.afk_mode = False
        # Устанавливаем статус обратно
        await self._client.edit_profile(first_name=self.original_nick)

        # Уведомление о отключении AFK
        exit_message = self.config.afk_exit_message
        await self._client.send_message(message.peer_id, exit_message)

    @loader.command(alias="setstatus")
    async def set_status_cmd(self, message):
        """Устанавливает новый статус (ник)."""
        new_status = utils.get_args_raw(message)
        if not new_status:
            await utils.answer(message, "Вы не указали новый статус.")
            return

        await self._client.edit_profile(first_name=new_status)
        await utils.answer(message, f"Статус установлен на: {new_status}")

    @loader.command(alias="reas")
    async def reason_cmd(self, message):
        """Добавляет причину к статусу AFK."""
        reason = utils.get_args_raw(message)
        if not reason:
            await utils.answer(message, "Вы не указали причину.")
            return
        
        if not self.afk_mode:
            await utils.answer(message, "Вы не в режиме AFK.")
            return

        elapsed_time = datetime.now() - self.start_time
        elapsed_time_str = str(elapsed_time).split('.')[0]  # Форматируем время
        afk_message = f"Я ушёл в AFK {elapsed_time_str} назад. Причина: {reason}"
        await utils.answer(message, afk_message)

    @loader.command(alias="delstatus")
    async def del_status_cmd(self, message):
        """Удаляет установленный статус из ника."""
        if not self.afk_mode:
            await utils.answer(message, "Вы не в режиме AFK.")
            return

        await self._client.edit_profile(first_name=self.original_nick)
        await utils.answer(message, f"Статус удалён. Ник возвращён к: {self.original_nick}")
        self.afk_mode = False  # Выключаем режим AFK после удаления статуса
