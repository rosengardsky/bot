# -*- coding: utf-8 -*-
# meta developer: разрушая мечты RequiMods
# meta banner: https://x0.at/Zixd.gif
# scope: hikka_only

import asyncio
from datetime import datetime
from .. import loader, utils

@loader.tds
class AFKModule(loader.Module):
    """Модуль для управления статусом AFK."""

    strings = {
        "name": "AFKModule",
        "cfg_afk_text": "Текст для статуса AFK",
        "cfg_afk_reason": "Причина для статуса AFK",
        "cfg_afk_status": "Статус пользователя при AFK"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("afk_text", "Я не здесь, напишите позже.", doc=self.strings["cfg_afk_text"]),
            loader.ConfigValue("afk_reason", "", doc=self.strings["cfg_afk_reason"]),
            loader.ConfigValue("afk_status", "AFK|| ", doc=self.strings["cfg_afk_status"])
        )
        self.afk_mode = False
        self.start_time = None
        self.original_nick = None

    async def client_ready(self, client, db):
        self._client = client

    @loader.command(alias="afk")
    async def afk_cmd(self, message):
        """Включает режим AFK и отправляет сообщение."""
        self.afk_mode = True
        self.start_time = datetime.now()
        afk_message = f"{self.config['afk_text']}\nВремя AFK: {self.start_time.strftime('%H:%M:%S')}"
        await utils.answer(message, afk_message)

        # Устанавливаем новый статус
        current_me = await self._client.get_me()
        self.original_nick = current_me.first_name  # Сохраняем оригинальный ник
        new_nick = f"{self.config['afk_status']}{self.original_nick}"
        await self._client(EditProfile(first_name=new_nick))

    @loader.command(alias="setstatus")
    async def set_status_cmd(self, message):
        """Устанавливает новый статус (ник)."""
        new_status = utils.get_args_raw(message)
        if not new_status:
            await utils.answer(message, "Вы не указали новый статус.")
            return

        await self._client(EditProfile(first_name=new_status))
        await utils.answer(message, f"Статус установлен на: {new_status}")

    @loader.command(alias="reas")
    async def reason_cmd(self, message):
        """Добавляет причину к статусу AFK."""
        reason = utils.get_args_raw(message)
        if not reason:
            await utils.answer(message, "Вы не указали причину.")
            return
        
        if not self.afk_mode:
            await utils.answer(message, "Вы не в режиме AFK.")
            return

        elapsed_time = datetime.now() - self.start_time
        elapsed_time_str = str(elapsed_time).split('.')[0]  # Форматируем время
        afk_message = f"Я ушёл в AFK {elapsed_time_str} назад. Причина: {reason}"
        await utils.answer(message, afk_message)

    @loader.command(alias="delstatus")
    async def del_status_cmd(self, message):
        """Возвращает ник в изначальное значение."""
        if not self.afk_mode:
            await utils.answer(message, "Вы не в режиме AFK.")
            return

        await self._client(EditProfile(first_name=self.original_nick))
        self.afk_mode = False
        await utils.answer(message, f"Статус AFK снят. Ник возвращен к: {self.original_nick}")
