# -*- coding: utf-8 -*-
# meta developer: RequiMods разрушая мечты
# meta banner: https://x0.at/Zixd.gif
# scope: hikka_only

import asyncio
import time
from datetime import datetime
from .. import loader, utils

class ModuleConfig:
    def __init__(self):
        self.afk_text = "Я сейчас не у компьютера (AFK)."
        self.afk_reason = ""
        self.afk_status = "AFK|| "
        self.afk_entry_message = "Режим AFK включён. Время: {time}"
        self.afk_exit_message = "Режим AFK выключен."

    def get_afk_text(self):
        return self.afk_text

    def set_afk_text(self, text):
        self.afk_text = text

@loader.tds
class RequimAFK(loader.Module):
    """Модуль для управления статусом AFK."""

    strings = {
        "name": "RequimAFK",
        "gone": "<b>Вы успешно вошли в AFK режим!</b>",
        "back": "<b>Вы успешно вышли из AFK режима!</b>",
        "afk": "<b>Сейчас я нахожусь в AFK\nБыл в сети <code>{}</code> назад</b>",
        "afk_reason": "<b>Сейчас я нахожусь в AFK\nБыл в сети <code>{}</code> назад\nПричина: <i>{}</i></b>",
        "no_user": "<b>Не удалось получить информацию о пользователе.</b>"
    }

    def __init__(self):
        self.config = ModuleConfig()
        self.afk_mode = False
        self.start_time = None
        self.original_nick = None

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    @loader.command()
    async def afk(self, message):
        """Включает режим AFK."""
        self.afk_mode = True
        self.start_time = datetime.now()
        await utils.answer(message, self.strings["gone"])
        
        current_me = await self._client.get_me()
        self.original_nick = current_me.first_name
        new_nick = f"{self.config.afk_status}{self.original_nick}"
        await self._client.edit_profile(first_name=new_nick)

    @loader.command()
    async def unafk(self, message):
        """Выключает режим AFK."""
        if not self.afk_mode:
            await utils.answer(message, "Вы не находитесь в режиме AFK.")
            return

        self.afk_mode = False
        await self._client.edit_profile(first_name=self.original_nick)
        await utils.answer(message, self.strings["back"])

    async def watcher(self, message):
        """Следит за упоминаниями бота."""
        if not isinstance(message, types.Message):
            return
        if message.mentioned or getattr(message.to_id, "user_id", None) == await self._client.get_me().id:
            if not self.afk_mode:
                return
            now = datetime.now()
            elapsed_time = now - self.start_time
            elapsed_time_str = str(elapsed_time).split('.')[0]  # Убираем миллисекунды
            afk_message = self.strings["afk"].format(elapsed_time_str)
            await utils.answer(message, afk_message)
